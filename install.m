(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
InstallOptEx::notcomp="Your Mathematica version is older than 10. Installation aborted!";
InstallOptEx::failed="Download of `1` failed. Installation aborted!";


(* ::Input::Initialization:: *)
AutoOverwriteOptExDirectory::usage="option of InstallOptEx. If set to True, the existing OptEx directory will be deleted without any further notice. The default value None means that the user will be asked by a dialog. False means that the directory will be overwritten.";
AutoDisableInsufficientVersionWarning::usage="option of InstallOptEx. If set to True, warning messages for notebooks that were created with a newer Mathematica version will be silently disabled. This is needed to use OptEx documentation in Mathematica 9 and 10, since otherwise the warning message will appear every time one opens a help page for a OptEx function. The default value None means that the user will be asked by a dialog. False means that the warning will not be disabled.";
OptExDevelopmentVersionLink::usage="option of InstallOptEx. It specifies the url to the main repository of OptEx. This repository is used to install the development version of OptEx.";
OptExStableVersionLink::usage="option of InstallOptEx. It specifies the url to the latest stable release of OptEx.";
InstallOptExDevelopmentVersion::usage="option of InstallOptEx. If set to True, the installer will download the latest development version of OptEx from the git repository. Otherwise it will install the latest stable version.";
InstallOptExTo::usage="option of InstallOptEx. It specifies the full path to the directory where OptEx will be installed.";


(* ::Input::Initialization:: *)
$PathToOptExArchive::usage="$PathToOptExArchive specifies where the installer should look for the zipped OptEx version. If the value is not empty, the installer will use the specified file instead of downloading it from the official website."
If[!ValueQ[$PathToOptExArchive],$PathToOptExArchive=""];


(* ::Input::Initialization:: *)
InstallOptExQuiet::usage="InstallOptExQuiet is the silent mode of installing OptEx, where the installer does not ask you any questions but silently overwrites any existing OptEx installation and modifies Mathematica's options accordingly. The main purpose of this mode is to facilitate the installation of OptEx on Mathematica Online.";


(* ::Input::Initialization:: *)
Options[InstallOptExQuiet]=Options[InstallOptEx];

InstallOptExQuiet[]:=InstallOptEx[AutoDisableInsufficientVersionWarning->True,AutoOverwriteOptExDirectory->True];


(* ::Input::Initialization:: *)
Options[InstallOptEx]={AutoDisableInsufficientVersionWarning->None,AutoOverwriteOptExDirectory->None,OptExDevelopmentVersionLink->"https://github.com/effExTeam/OptEx-1.0.0/raw/master/OptEx.zip",OptExStableVersionLink->"https://github.com/effExTeam/OptEx-1.0.0/raw/master/latest/OptEx.zip",InstallOptExDevelopmentVersion->False,InstallOptExTo->FileNameJoin[{$UserBaseDirectory,"Applications","OptEx"}]};

InstallOptEx[OptionsPattern[]]:=
Module[{unzipDir,tmpzip,gitzip,packageName,packageDir,fullPath,strDisableWarning,CDGetUrl,(*configFileProlog,*)strOverwriteCDdit,zipDir},
	gitzip=If[OptionValue[InstallOptExDevelopmentVersion],
			OptionValue[OptExDevelopmentVersionLink],
			OptionValue[OptExStableVersionLink]];
	packageName="OptEx";
	packageDir=OptionValue[InstallOptExTo];
	strDisableWarning="We need to disable the warning that appears when you open a notebook that was created with a newer Mathematica version.
			Otherwise this warning will pop up every time you use the Documentation Center to read info on OptEx functions in older Mathematica versions.
			This setting is harmless and can be always undone via \"SetOptions[$FrontEnd, MessageOptions -> {\"InsufficientVersionWarning\" -> True}]\".
			Should we do this now?";
	strOverwriteCDdit="Looks like OptEx is already installed. Do you want to replace the content of "<>packageDir<>" with the downloaded version of OptEx?
			If you are using any custom configuration files or add-ons that are located in that directory, please backup them in advance.";
	(*configFileProlog="(*Here you can put some commands and settings to be evaluated on every start of OptEx. \n
			This allows you to customize your OptEx installation to fit your needs best.*)";*)
	If[$VersionNumber<10,Message[InstallOptEx::notcomp];Abort[]];
	CDGetUrl[x_]:=URLSave[x,CreateTemporary[]];

	(*If the package directory already exists,ask the user about overwriting*)
	If[DirectoryQ[packageDir],
		If[OptionValue[AutoOverwriteOptExDirectory],
			Quiet@DeleteDirectory[packageDir,DeleteContents->True],
			Null,
			If[ChoiceDialog[strOverwriteCDdit,
						{"Yes, overwrite the "<>packageName<>" directory"->True,"No, I need to do a backup first. Abort installation."->False},
						WindowFloating->True,WindowTitle->"Existing OptEx Installation detected"],
				Quiet@DeleteDirectory[packageDir,DeleteContents->True],
				Abort[]
				]
			]
		];
	
	(*Download OptEx archive*)
	If[$PathToOptExArchive=!="",
		tmpzip=$PathToOptExArchive;WriteString["stdout","Installing OptEx from ",tmpzip," ..."],
		WriteString["stdout","Downloading OptEx from ",gitzip," ..."];tmpzip=CDGetUrl[gitzip];
		];
	If[tmpzip===$Failed,
		WriteString["stdout","\nFailed to download OptEx. Please check your interent connection.\nInstallation aborted!"];Abort[],
		unzipDir=tmpzip<>".dir";WriteString["stdout","done! \n"];
		];

	(*Extract to the content*)
	WriteString["stdout","OptEx zip file was saved to ",tmpzip,".\n"];
	WriteString["stdout","Extracting OptEx zip file to ",unzipDir," ..."];
	If[ExtractArchive[tmpzip,unzipDir]===$Failed,
		WriteString["stdout","\nFailed to extract the OptEx zip. The file might be corrupted.\nInstallation aborted!"];Abort[],
		WriteString["stdout","done! \n"];

			(*Delete the downloaded file*)
			If[$PathToOptExArchive==="",Quiet@DeleteFile[tmpzip];]
		];
	WriteString["stdout","Recognizing the directory structure..."];
	zipDir=FileNames["OptEx.m",FileNameJoin[{unzipDir,"OptEx"}],Infinity];
	If[Length[zipDir]===1,
		fullPath=DirectoryName[zipDir[[1]]];zipDir=Last[FileNameSplit[DirectoryName[zipDir[[1]]]]];WriteString["stdout","done! \n"],
		WriteString["stdout","\nFailed to recognize the directory structure of the downloaded zip file. \nInstallation aborted!"];Abort[]
		];

	(*Move the files to the final destination*)
	WriteString["stdout","Copying "<>packageName<>" to ",packageDir," ..."];
	If[CopyDirectory[fullPath,packageDir]===$Failed,
		WriteString["stdout","\nFailed to copy "<>fullPath<>" to ",packageDir<>". \nInstallation aborted!"];Abort[],
		WriteString["stdout","done! \n"];
					
			(*Delete the extracted archive*)
			Quiet@DeleteDirectory[unzipDir,DeleteContents->True];
		];
	If[OptionValue[AutoDisableInsufficientVersionWarning],
		SetOptions[$FrontEnd,MessageOptions->{"InsufficientVersionWarning"->False}],
		Null,
		If[ChoiceDialog[strDisableWarning,WindowFloating->True,WindowTitle->"Documentation system"],
			SetOptions[$FrontEnd,MessageOptions->{"InsufficientVersionWarning"->False}]
			]
		];
	WriteString["stdout","done! \n"];

	(*RebuildPacletData[];*)
	WriteString["stdout","\nInstallation complete! Loading OptEx ... \n"];
	Get["OptEx`"];
];
